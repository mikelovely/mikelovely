{% extends 'templates/app.twig' %}

{% block content %}
    <section class="portfolio">
        <div class="portfolio-item">
            <div class="row portfolio-item__wrapper">
                <div class="one-third column portfolio-item__image">
                    <img src="/images/person-woman-hand-smartphone.jpg">
                </div>
                <div class="two-thirds column portfolio-item__content">
                    <h3>Contactzilla</h3>
                    <div class="label-wrapper">
                        <span class="label label-default front-end">CoffeeScript</span>
                        <span class="label label-default database">MongoDB</span>
                        <span class="label label-default back-end">CardDAV</span>
                        <span class="label label-default front-end">Backbone JS</span>
                        <span class="label label-default back-end">Zend 1</span>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="twelve columns portfolio-item__text">
                    <p>Contactzilla uses CardDAV technology to share contacts between teams. I maintained this project for about six months and added a range of new features during this time.</p>
                    <p>I integrated a "custom fields" feature for each contact. I then expanded this feature so that custom fields could be searched on, and I restructured the importer and exporter scripts to handle custom fields. I also used different APIs to allow administrators of address books to import contacts from other resources such as Office365 and Slack. I also spent time getting to grips with Google Drive API and using Google Picker to store links to documents against specified contacts.</p>
                    <p>One of the most enjoyable parts of this project was resolving a long standing issue relating to accounts being used for free when they should be paying. With over 16,000 accounts, I [investigated, used reason and logic, worked on a sample of data] to produce a list of thousands of accounts to be flagged for deletion.</p>
                </div>
            </div>
        </div>

        <div class="portfolio-item">
            <div class="row portfolio-item__wrapper">
                <div class="one-third column portfolio-item__image">
                    <img src="/images/people-woman-coffee-meeting.jpg">
                </div>
                <div class="two-thirds column portfolio-item__content">
                    <h3>BaseKit</h3>
                    <div class="label-wrapper">
                        <span class="label label-default back-end">Symfony 2</span>
                        <span class="label label-default dev-ops">Docker</span>
                        <span class="label label-default database">MySQL</span>
                        <span class="label label-default back-end">API Documentation</span>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="twelve columns portfolio-item__text">
                    <p>I integrated several payment gateways in to an existing Symfony2 project, specifically; Yandex, Mercado Pago, 2Checkout and Payfast. This involved a lot of interesting edge-cases when needing to show or hide certain payment methods at checkout. BaseKit were really happy with work and came back to us for help with an Ionic 2 application.</p>
                    <p>The most challenging part of this project was understanding the various flows each gateway would use for authorising payments.</p>
                </div>
            </div>
        </div>

        <div class="portfolio-item">
            <div class="row portfolio-item__wrapper">
                <div class="one-third column portfolio-item__image">
                    <img src="/images/surveys-artwork.jpg">
                </div>
                <div class="two-thirds column portfolio-item__content">
                    <h3>Happy City</h3>
                    <div class="label-wrapper">
                        <span class="label label-default back-end">Laravel 5</span>
                        <span class="label label-default database">PostgreSQL</span>
                        <span class="label label-default back-end">PHPUnit</span>
                        <span class="label front-end">Twig</span>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="twelve columns portfolio-item__text">
                    <p>I was required to quickly set-up and deliver a survey based system for our client to ask members of the public to rate their happiness. In this case, speed was key due to the clients limited budget.</p>
                    <p>Percentiles was a key feature of the user experience so I used PostgreSQL as it has excellent percentile functions built-in. I used a standard Laravel installation but switched out the default templating engine Blade for Twig to make my front-end colleaguesâ€™ life as easy as possible.</p>
                    <p>The project was delivered on time and to budget.</p>
                </div>
            </div>
        </div>

        <div class="portfolio-item">
            <div class="row portfolio-item__wrapper">
                <div class="one-third column portfolio-item__image">
                    <img src="/images/electronic-payment.jpeg">
                </div>
                <div class="two-thirds column portfolio-item__content">
                    <h3>Chippin</h3>
                    <div class="label-wrapper">
                        <span class="label label-default back-end">PHP</span>
                        <span class="label label-default back-end">Prestashop</span>
                        <span class="label label-default back-end">eCommerce</span>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="twelve columns portfolio-item__text">
                    <p>This was a short project to create a Chippin (yet another payment gateway!) module for Prestashop. Prestashop is an eCommerce platform. It was built loosely in OOP PHP following Prestashop conventions.</p>
                </div>
            </div>
        </div>
    </section>
{% endblock %}
